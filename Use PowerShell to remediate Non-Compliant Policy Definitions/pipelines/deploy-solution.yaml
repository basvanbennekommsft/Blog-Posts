schedules:
  - cron: "0 0 * * *"
    displayName: Nightly Run
    branches:
      include:
        - main

pool:
  vmImage: ubuntu-latest

parameters:
  # Generic Parameters
  - name: tooling # This parameter determines whether an Issue in GitHub, or a Bug in Azure DevOps is created
    displayName: Tooling
    type: string
    default: AzureDevOps
  - name: keyVaultName
    displayName: Key Vault Name
    type: string
    default: <REPLACE>

  # Azure DevOps Parameters (use when the tooling parameter is set to AzureDevOps)
  - name: moduleName
    displayName: Module Name
    type: string
    default: VSTeam
  - name: azureDevOpsOrganizationName
    displayName: Azure DevOps Organization Name
    type: string
    default: <REPLACE>
  - name: azureDevOpsProjectName
    displayName: Azure DevOps Project Name
    type: string
    default: <REPLACE>
  - name: azureDevOpsTeamName
    displayName: Azure DevOps Team Name
    type: string
    default: <REPLACE>

  # GitHub Parameters (use when the tooling parameter is set to GitHub)
  - name: gitHubOrganizationName
    displayName: GitHub Organization Name
    type: string
    default: <REPLACE>
  - name: gitHubRepositoryName
    displayName: GitHub Repository Name
    type: string
    default: <REPLACE>

variables:
  - name: secretName
    ${{ if eq(parameters.tooling, 'AzureDevOps')}}:
      value: ADOPersonalAccessToken
    ${{ if eq(parameters.tooling, 'GitHub')}}:
      value: GHPersonalAccessToken

jobs:
  - job: completeSolution
    displayName: Complete Solution
    steps:
      - task: AzureKeyVault@2
        name: retrievePersonalAccessToken
        displayName: Retrieve Personal Access Token
        inputs:
          azureSubscription: "<REPLACE>"
          KeyVaultName: ${{parameters.keyVaultName}}
          SecretsFilter: ${{variables.secretName}}
          RunAsPreJob: true

      - task: AzurePowerShell@5
        name: startPolicyDefinitionRemediation
        displayName: Start Policy Definition Remediation
        inputs:
          azureSubscription: "<REPLACE>"
          ScriptType: "FilePath"
          ScriptPath: "$(System.DefaultWorkingDirectory)/Use PowerShell to remediate Non-Compliant Policy Definitions/solutions/Start-PolicyDefinitionRemediation.ps1"
          azurePowerShellVersion: LatestVersion
          pwsh: true

      - task: AzurePowerShell@5
        # Only run this task when there is a need to create a Bug in Azure DevOps
        condition: and(eq(variables['startPolicyDefinitionRemediation.createAzureDevOpsBug'], 'true'), eq('${{ parameters.tooling }}', 'AzureDevOps'))
        name: createAzureDevOpsBug
        displayName: Create Azure DevOps Bug
        inputs:
          azureSubscription: "<REPLACE>"
          ScriptType: "FilePath"
          ScriptPath: "$(System.DefaultWorkingDirectory)/Use PowerShell to remediate Non-Compliant Policy Definitions/solutions/Create-AzureDevOpsBug.ps1"
          ScriptArguments:
            -FailedPolicyRemediationTasksJsonString '$(startPolicyDefinitionRemediation.failedPolicyRemediationTasksJsonString)'
            -ModuleName ${{parameters.moduleName}}
            -OrganizationName ${{parameters.azureDevOpsOrganizationName}}
            -ProjectName ${{parameters.azureDevOpsProjectName}}
            -PersonalAccessToken $(ADOPersonalAccessToken)
            -TeamName '${{parameters.azureDevOpsTeamName}}'
          azurePowerShellVersion: LatestVersion
          pwsh: true

      - task: AzurePowerShell@5
        # Only run this task when there is a need to create an Issue in GitHub
        condition: and(eq(variables['startPolicyDefinitionRemediation.createAzureDevOpsBug'], 'true'), eq('${{ parameters.tooling }}', 'GitHub'))
        name: createGitHubIssue
        displayName: Create GitHub Issue
        inputs:
          azureSubscription: "<REPLACE>"
          ScriptType: "FilePath"
          ScriptPath: "$(System.DefaultWorkingDirectory)/Use PowerShell to remediate Non-Compliant Policy Definitions/solutions/Create-GitHubIssue.ps1"
          ScriptArguments:
            -FailedPolicyRemediationTasksJsonString '$(startPolicyDefinitionRemediation.failedPolicyRemediationTasksJsonString)'
            -OrganizationName ${{parameters.gitHubOrganizationName}}
            -RepositoryName ${{parameters.gitHubRepositoryName}}
            -PersonalAccessToken $(GHPersonalAccessToken)
          azurePowerShellVersion: LatestVersion
          pwsh: true